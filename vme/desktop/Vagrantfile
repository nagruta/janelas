# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  ## customized [c4augustus]
  #config.vm.box = "ubuntu/bionic64"
  #config.vm.box = "ansible/tower"
  #config.vm.box = "darkwizard242/ansibleubuntu1804"
  #config.vm.box = "generic/ubuntu2004"
  #config.vm.box = "rdf/ubuntu2004-devops"
  ##config.vm.box = "kurron/focal-xubuntu"
  config.vm.box = "myaylaci/xubuntu2004-desktop"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  ## customized [c4augustus]
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  ## customized [c4augustus]
  config.vm.synced_folder "/opt", "/mnt/opt"
  config.vm.synced_folder "../..", "/mnt/top"
  config.vm.synced_folder "../../../..", "/mnt/super"
    ## optional super level directory above us (great-grandparent)
  config.vm.synced_folder "/Users", "/mnt/home"
  changeuser = nil
  Dir.glob("/Users/*").each do |filename| ## add all Windows users to /home
    if (File.directory?(filename))
      if (Dir.glob("#{filename}/*").size > 0) # verify accessible
        dirname = filename.partition("/Users/")[2]
        if (dirname[0] != "." && !["All Users", "Default", "Default User", "Public"].include?(dirname))
          puts "## syncing /Users/#{dirname} to /home/#{dirname}"
          config.vm.synced_folder "/Users/#{dirname}", "/home/#{dirname}"
          if (!changeuser && dirname == ENV["USERNAME"])
            changeuser = dirname
            puts "## .bash_login will change HOME to /home/#{dirname}"
          end
        end
      end
    end
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
config.vm.provider "virtualbox" do |vb|
  # Display the VirtualBox GUI when booting the machine
  vb.gui = true
  vb.memory = "16384"
  vb.customize ["modifyvm", :id, "--vram", "128"]
  vb.customize ["modifyvm", :id, "--cpus", "3"]
  if RUBY_PLATFORM =~ /darwin/
    vb.customize ["modifyvm", :id, '--audio', 'coreaudio', '--audiocontroller', 'hda'] # choices: hda sb16 ac97
  elsif RUBY_PLATFORM =~ /mingw|mswin|bccwin|cygwin|emx/
    vb.customize ["modifyvm", :id, '--audio', 'dsound', '--audiocontroller', 'ac97']
  end
end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  provision = <<-SHELL
    #sudo apt update
    #sudo apt --force-yes --yes install python-pip
    sudo apt --force-yes --yes install git-lfs
    sudo apt --force-yes --yes install keychain
    pip install pywinrm
  SHELL
  if changeuser
    bashlogin = ". .profile\\nexport HOME=/home/#{changeuser}\\ncd\\n. .bash_profile"
    provision += "    echo -e \"#{bashlogin}\" >.bash_login"
  end
  config.vm.provision "shell", inline: provision
end
